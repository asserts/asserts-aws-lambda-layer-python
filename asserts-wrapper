#!/bin/bash

  export LAMBDA_LAYER_PKGS_DIR="/opt/python";

  # - Set Lambda Layer python packages in PYTHONPATH so `opentelemetry-instrument`
  #   script can find them (it needs to find `opentelemetry` to find the auto
  #   instrumentation `run()` method later)

  export PYTHONPATH="$LAMBDA_LAYER_PKGS_DIR:$PYTHONPATH";

  # - Set Lambda runtime python packages in PYTHONPATH so
  #   `opentelemetry-instrument` script can find them during auto instrumentation
  #   and instrument them.

  export PYTHONPATH="$LAMBDA_RUNTIME_DIR:$PYTHONPATH";

  # Configure OpenTelemetry Python with environment variables

  # - We leave `OTEL_EXPORTER_OTLP_TRACES_ENDPOINT` to its default. This is
  #   `http://localhost:4318/v1/traces` because we are using the HTTP exporter

  # - If OTEL_EXPORTER_OTLP_PROTOCOL is not set by user, the default exporting protocol is http/protobuf.
  if [ "${ENABLE_TRACING}" ]; then
    if [ -z "${OTEL_EXPORTER_OTLP_PROTOCOL}" ]; then
        export OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
    fi


    export LAMBDA_RESOURCE_ATTRIBUTES="cloud.region=$AWS_REGION,cloud.provider=aws,faas.name=$AWS_LAMBDA_FUNCTION_NAME,faas.version=$AWS_LAMBDA_FUNCTION_VERSION,faas.instance=$AWS_LAMBDA_LOG_STREAM_NAME";

    if [ -z "${OTEL_RESOURCE_ATTRIBUTES}" ]; then
        export OTEL_RESOURCE_ATTRIBUTES=$LAMBDA_RESOURCE_ATTRIBUTES;
    else
        export OTEL_RESOURCE_ATTRIBUTES="$LAMBDA_RESOURCE_ATTRIBUTES,$OTEL_RESOURCE_ATTRIBUTES";
    fi
  fi
  # the path to the interpreter and all of the originally intended arguments
  args=("$@")

  # Store _HANDLE value into a variable and set asserts handler
  export ORIG_HANDLER=$_HANDLER;
  export _HANDLER="asserts_wrapper.lambda_handler";

  # start the runtime
  if [ -z "${ENABLE_TRACING}" ]; then
      exec "${args[@]}"
  else
      python3 $LAMBDA_LAYER_PKGS_DIR/bin/opentelemetry-instrument "$@"

  fi
